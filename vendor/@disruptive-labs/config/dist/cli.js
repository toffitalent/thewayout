"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }var _chunkNEJSZOZXjs = require('./chunk-NEJSZOZX.js');var S=_chunkNEJSZOZXjs.b.call(void 0, (se,L)=>{L.exports={name:"@disruptive-labs/config",version:"1.1.3",description:"Disruptive Labs config",main:"dist/index.js",bin:{"env-run":"bin/env-run.js"},repository:"https://github.com/disruptive-labs/config.git",author:"Disruptive Labs",license:"UNLICENSED",files:["README.md","init.js","bin/","dist/"],publishConfig:{access:"restricted",registry:"https://registry.npmjs.org/"},scripts:{build:"tsc",lint:"tsc --noEmit && eslint .",prepare:"husky install",release:"release-it",test:"jest --coverage"},dependencies:{commander:"^9.5.0","cross-spawn":"^7.0.3",deepmerge:"^4.3.1",dotenv:"^16.3.1","dotenv-expand":"^8.0.3","lodash.get":"^4.4.2","lodash.set":"^4.3.2","pkg-dir":"^5.0.0"},devDependencies:{"@commitlint/cli":"^17.8.1","@commitlint/config-conventional":"^17.8.1","@release-it/conventional-changelog":"^8.0.1","@types/cross-spawn":"^6.0.6","@types/jest":"^29.5.11","@types/lodash.get":"^4.4.9","@types/lodash.set":"^4.3.9","@types/node":"^20.10.3","@typescript-eslint/eslint-plugin":"^6.13.2","@typescript-eslint/parser":"^6.13.2",eslint:"^8.55.0","eslint-config-airbnb-base":"^15.0.0","eslint-config-prettier":"^9.1.0","eslint-plugin-import":"^2.29.0","eslint-plugin-prettier":"^5.0.1",husky:"^8.0.3",jest:"^29.7.0","jest-junit":"^16.0.0",prettier:"^3.1.0","release-it":"^17.0.0",rimraf:"^3.0.2","ts-jest":"^29.1.1",tsup:"^8.4.0",typescript:"^5.3.3",zod:"^3.22.4"},jest:{collectCoverageFrom:["<rootDir>/src/**/*.{js,ts}"],preset:"ts-jest",resetMocks:!0,resetModules:!0,roots:["<rootDir>/src"]},"jest-junit":{outputDirectory:"./artifacts/jest",outputName:"results.xml"},"release-it":{git:{commitMessage:"chore: release ${version}",tagName:"v${version}"},npm:{publish:!0},github:{release:!0,releaseName:"${version}"},hooks:{"after:bump":"rimraf dist && yarn build"},plugins:{"@release-it/conventional-changelog":{preset:"conventionalcommits"}}}}});var _commander = require('commander');var _crossspawn = require('cross-spawn'); var _crossspawn2 = _interopRequireDefault(_crossspawn);var _fs = require('fs'); var p = _interopRequireWildcard(_fs); var c = _interopRequireWildcard(_fs); var b = _interopRequireWildcard(_fs);var _path = require('path');var _pkgdir = require('pkg-dir'); var _pkgdir2 = _interopRequireDefault(_pkgdir);var j=[".env.js",".env.config.js",".env.json"],C=e=>_path.isAbsolute.call(void 0, e)?e:_path.resolve.call(void 0, process.cwd(),e),D=async e=>{try{return await _chunkNEJSZOZXjs.a.call(void 0, e)}catch (e2){throw new Error(`Failed to load env config file: ${e}`)}},f=async e=>{let t;if(e.file&&(t=C(e.file),!p.existsSync(t)))throw new Error(`Invalid env config file path: ${t}`);if(!t){let r=[process.cwd(),_pkgdir2.default.sync()].filter(Boolean);if(t=[].concat(...j.map(s=>r.map(n=>_path.resolve.call(void 0, n,s)))).find(s=>p.existsSync(s)),!t)throw new Error("Failed to find env config file")}let o=await D(t);return e.verbose&&console.log(`Found env config file: ${t}`),o};var _dotenv = require('dotenv');var u=async e=>{let t=e.out||`.env.${process.env.NODE_ENV}`,o=_path.isAbsolute.call(void 0, t)?t:_path.resolve.call(void 0, process.cwd(),t);if(c.existsSync(o)){e.verbose&&console.log(`Output file ${t} found and will be merged`);let r=await c.promises.readFile(o),i=_dotenv.parse.call(void 0, r);return await c.promises.unlink(o),i}return e.verbose&&console.log(`Output file ${t} does not exist and will be created`),{}};var v=["SIGINT","SIGTERM","SIGHUP"],g=(e,t)=>{if(t!==void 0)return process.kill(process.pid,t);if(e!==void 0)return process.exit(e);throw new Error("Unable to terminate parent process successfully")},T=e=>{console.error(e.message),process.exit(1)};function h(e,t={}){process.on("uncaughtException",T);let o={},r={exitCalled:!1},i=()=>{v.forEach(s=>{process.removeListener(s,o[s])}),process.removeListener("exit",o.SIGTERM)};v.forEach(s=>{o[s]=(n,a)=>{if(i(),!r.exitCalled){t.verbose&&console.log(`Parent process exited with signal: ${n.toString()}. Terminating child process...`),r.exitCalled=!0;let l;typeof n=="number"?n>(_nullishCoalesce(a, () => (0)))&&(a=n,l="SIGINT"):l=n,e.kill(_nullishCoalesce(l, () => (a))),g(a,l)}},process.once(s,o[s])}),process.once("exit",o.SIGTERM),e.on("exit",(s,n)=>{if(i(),!r.exitCalled){t.verbose&&console.log(`Child process exited with code: ${(_nullishCoalesce(s, () => (""))).toString()} and signal: ${(_nullishCoalesce(n, () => (""))).toString()}. Terminating parent process...`),r.exitCalled=!0;let a;typeof n=="number"?n>(_nullishCoalesce(s, () => (0)))&&(s=n,a="SIGINT"):a=_nullishCoalesce(n, () => (void 0)),g(s,a)}})}var E=async(e,t={})=>{let o=t.out||`.env.${process.env.NODE_ENV}`,r=_path.isAbsolute.call(void 0, o)?o:_path.resolve.call(void 0, process.cwd(),o);await b.promises.writeFile(r,Object.keys(e).sort().map(i=>`${i}=${e[i]}`).join(`
`)),t.verbose&&console.log(`Environment saved to output file: ${o}`)};var x=async(e,t)=>{let o=t.opts();process.env.NODE_ENV=o.environment||process.env.NODE_ENV||"development",process.env.CONFIG_NODE_ENV=process.env.NODE_ENV;let r=o.out&&await u(o),i=await f(o);if(o.out){let a=o.override?{...r,...i}:{...i,...r};await E(a,o)}let[s,...n]=t.args;s&&h(_crossspawn2.default.call(void 0, s,n,{stdio:"inherit",shell:o.useShell,env:o.override?{...process.env,...i}:{...i,...process.env}}),o)};var V=S(),y=new _commander.Command,ie= exports.CLI =async e=>{y.version(V.version).usage("[options] <command> [...args]").option("-e, --environment <environment>","Environment to use").option("-f, --file <filename>","Configuration file to use (JS or JSON)").option("-o, --out <filename> ","Write env file (e.g. react-native-config support)").option("--no-override","Do not override existing environment variables").option("--use-shell","Execute command in a new shell with given environment").option("--verbose","Print debugging messages").allowUnknownOption(!0).action(x),await y.parseAsync(e)};exports.CLI = ie;
