import React from 'react';
import type { Modifier, Placement, VirtualElement } from '@popperjs/core';
import { ReactRef } from '../../utils';
export interface UsePopperProps {
    /**
     * The boundary area for the popper element for use with the `preventOverflow` modifier
     *
     * @default "clippingParents"
     */
    boundary?: 'clippingParents' | 'scrollParent' | HTMLElement;
    /**
     * If `true`, the popper element will change its placement and flip when it's about to overflow
     * the boundary area.
     *
     * @default true
     */
    flip?: boolean;
    /**
     * The distance or margin between the reference element and the popper element.
     *
     * Note: The `offset` prop overrides the `gutter` prop.
     */
    gutter?: number;
    /**
     * If `true`, the popper element will match the width of the reference element at all times.
     */
    matchWidth?: boolean;
    /**
     * Array of additional/custom Popper.js modifiers to apply.
     */
    modifiers?: Partial<Modifier<string, any>>[];
    /**
     * The main and cross-axis offset to use for the popper element relative to its reference
     * element.
     */
    offset?: [crossAxis: number, mainAxis: number];
    /**
     * The placement of the popper element relative to its reference element.
     *
     * @default "bottom"
     */
    placement?: Placement;
    /**
     * If `true`, will prevent the popper element from being cut off and remain visible within the
     * boundary area.
     *
     * @default true
     */
    preventOverflow?: boolean;
    /**
     * The CSS positioning strategy for Popper.js to use.
     *
     * @default "absolute"
     */
    strategy?: 'absolute' | 'fixed';
}
/**
 * `usePopper` is a React hook for initializing a Popper.js instance. The returned functions can be
 * use to wire up elements for Popper-based positioning of the elements relative to some reference
 * element.
 */
export declare const usePopper: ({ boundary, flip: flipProp, gutter, matchWidth, modifiers, offset: offsetProp, placement: placementProp, preventOverflow: preventOverflowProp, strategy, }?: UsePopperProps) => {
    update: (() => Promise<Partial<import("@popperjs/core").State>>) | undefined;
    forceUpdate: (() => void) | undefined;
    popperRef: (ref: HTMLElement | null) => void;
    referenceRef: (ref: Element | VirtualElement | null) => void;
    getArrowProps: (props?: React.HTMLAttributes<HTMLDivElement>, ref?: ReactRef<HTMLDivElement>) => {
        ref: (node: HTMLElement | null) => void;
        'data-popper-arrow': string;
        style: any;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "no" | "yes" | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "date" | "true" | "false" | "page" | "location" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "other" | "ascending" | "descending" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: React.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
    };
    getPopperProps: (props?: React.HTMLAttributes<HTMLDivElement>, ref?: ReactRef<HTMLDivElement>) => {
        ref: (node: HTMLElement | null) => void;
        style: any;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "no" | "yes" | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "date" | "true" | "false" | "page" | "location" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "other" | "ascending" | "descending" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: React.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
    };
    getReferenceProps: (props?: React.HTMLAttributes<HTMLElement>, ref?: ReactRef<HTMLElement>) => {
        ref: (node: Element | VirtualElement | null) => void;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: React.CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "no" | "yes" | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "email" | "tel" | "url" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "inline" | "none" | "list" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "date" | "true" | "false" | "page" | "location" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "other" | "ascending" | "descending" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: React.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLElement> | undefined;
        onChange?: React.FormEventHandler<HTMLElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLElement> | undefined;
        onInput?: React.FormEventHandler<HTMLElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLElement> | undefined;
        onReset?: React.FormEventHandler<HTMLElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onError?: React.ReactEventHandler<HTMLElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onResize?: React.ReactEventHandler<HTMLElement> | undefined;
        onResizeCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLElement> | undefined;
    };
};
