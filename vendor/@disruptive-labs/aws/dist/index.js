"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var _awscdklib = require('aws-cdk-lib');var _awscertificatemanager = require('aws-cdk-lib/aws-certificatemanager');var A=class extends _awscdklib.aws_elasticloadbalancingv2.ApplicationLoadBalancer{constructor(t,o,{certificate:e,defaultAction:r,dnsRecord:i,domainName:n,domainZone:a,listenerPort:s,openListener:u=!0,protocol:m=_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocol.HTTPS,redirectHTTP:b,sslPolicy:h,token:f,...y}){super(t,o,{internetFacing:!0,...y}),this.loadBalancer=this,this.token=f,this.listener=this.addListener("Listener",{protocol:m,port:s,open:u,sslPolicy:h,defaultAction:r||_awscdklib.aws_elasticloadbalancingv2.ListenerAction.fixedResponse(403,{contentType:"application/json",messageBody:'{"status":403,"code":"AccessDenied","error":"Access denied"}'})});let l=a||(n?_awscdklib.aws_route53.HostedZone.fromLookup(t,"HostedZone",{domainName:_awscertificatemanager.apexDomain.call(void 0, n)}):void 0);if(m===_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocol.HTTPS){let g=e;if(!g){if(!n||!l)throw new Error("A domain name is required when using HTTPS.");g=new _awscdklib.aws_certificatemanager.Certificate(this,"Certificate",{domainName:n,validation:_awscdklib.aws_certificatemanager.CertificateValidation.fromDns(l)})}this.listener.addCertificates("ListenerCertificate",[_awscdklib.aws_elasticloadbalancingv2.ListenerCertificate.fromCertificateManager(g)])}if((_nullishCoalesce(b, () => (m===_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocol.HTTPS)))&&(this.redirectListener=this.addListener("RedirectListener",{protocol:_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocol.HTTP,port:80,open:!0,defaultAction:_awscdklib.aws_elasticloadbalancingv2.ListenerAction.redirect({port:"443",protocol:_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocol.HTTPS,permanent:!0})})),this.loadBalancerDomainName=this.loadBalancerDnsName,this.loadBalancerDomainName&&n&&(_nullishCoalesce(i, () => (!!n)))){if(!l)throw new Error("A domain zone is required to configure the specified domain name.");let g=new _awscdklib.aws_route53.ARecord(this,"DNS",{zone:l,recordName:n,target:_awscdklib.aws_route53.RecordTarget.fromAlias(new _awscdklib.aws_route53_targets.LoadBalancerTarget(this))});this.loadBalancerDomainName=g.domainName}new (0, _awscdklib.CfnOutput)(this,"LoadBalancerDNS",{value:this.loadBalancerDnsName}),new (0, _awscdklib.CfnOutput)(this,"LoadBalancerURL",{value:`${m.toLowerCase()}://${this.loadBalancerDomainName}`})}getCloudFrontOrigin(t){return new _awscdklib.aws_cloudfront_origins.HttpOrigin(this.loadBalancerDomainName,{...t,customHeaders:{...this.getTokenHeaders(),..._optionalChain([t, 'optionalAccess', _2 => _2.customHeaders])}})}getTokenListenerCondition(){if(this.token)return _awscdklib.aws_elasticloadbalancingv2.ListenerCondition.httpHeader("X-ALB-Auth-Token",[this.token])}getTokenHeaders(){if(this.token)return{"X-ALB-Auth-Token":this.token}}};var _constructs = require('constructs');var _crypto = require('crypto'); var ie = _interopRequireWildcard(_crypto);var _fsextra = require('fs-extra');var _path = require('path');var _tmp = require('tmp'); var _tmp2 = _interopRequireDefault(_tmp);var P=(c,t,o=!1)=>{let e=_tmp2.default.dirSync();return _fsextra.copySync.call(void 0, c,e.name),_fsextra.writeFileSync.call(void 0, _path.join.call(void 0, e.name,"config.json"),JSON.stringify(t)),o?_awscdklib.aws_lambda.Code.fromAssetImage(e.name):_awscdklib.aws_lambda.Code.fromAsset(e.name)};var Ht=(c,t)=>{let o=_tmp2.default.dirSync();return _fsextra.writeFileSync.call(void 0, _path.join.call(void 0, o.name,c),t),_awscdklib.aws_lambda.Code.fromAsset(o.name)};var ne=c=>ie.createHash("md5").update(c).digest("hex").substr(0,6);var I=class extends _constructs.Construct{constructor(t,o,{certificate:e,edgeLambdas:r,recordNames:i,targetDomain:n,zone:a,...s}){super(t,o);let u=_nullishCoalesce(i, () => ([a.zoneName]));if(e){let f=_awscdklib.Stack.of(this).splitArn(e.certificateArn,_awscdklib.ArnFormat.NO_RESOURCE_NAME).region;if(!_awscdklib.Token.isUnresolved(f)&&f!=="us-east-1")throw new Error(`The certificate must be in the us-east-1 region and the certificate you provided is in ${f}.`)}let m=e||new _awscdklib.aws_certificatemanager.DnsValidatedCertificate(this,"RedirectCertificate",{domainName:u[0],subjectAlternativeNames:u,hostedZone:a,region:"us-east-1"}),b=new _awscdklib.aws_s3.Bucket(this,"RedirectBucket",{websiteRedirect:{hostName:n,protocol:_awscdklib.aws_s3.RedirectProtocol.HTTPS},removalPolicy:_awscdklib.RemovalPolicy.DESTROY,blockPublicAccess:_awscdklib.aws_s3.BlockPublicAccess.BLOCK_ALL}),h=new _awscdklib.aws_cloudfront.Distribution(this,"RedirectDistribution",{defaultRootObject:"",comment:`Redirect to ${n} from ${u.join(", ")}`,priceClass:_awscdklib.aws_cloudfront.PriceClass.PRICE_CLASS_ALL,...s,certificate:m,domainNames:u,defaultBehavior:{edgeLambdas:r,origin:new _awscdklib.aws_cloudfront_origins.S3Origin(b),viewerProtocolPolicy:_awscdklib.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS}});u.forEach(f=>{let y=ne(f),l={recordName:f,zone:a,target:_awscdklib.aws_route53.RecordTarget.fromAlias(new _awscdklib.aws_route53_targets.CloudFrontTarget(h))};new _awscdklib.aws_route53.ARecord(this,`RedirectAliasRecord${y}`,l),new _awscdklib.aws_route53.AaaaRecord(this,`RedirectAliasRecordSix${y}`,l)})}};var N=class c extends _awscdklib.aws_ecs.FargateService{constructor(t,o,{cluster:e,cpu:r,healthCheck:i,listener:n,listenerConditions:a=[],listenerPathPatterns:s,listenerPriority:u=10,loadBalancer:m,maxCapacity:b,minCapacity:h,memoryLimitMiB:f,targetCpuUtilizationPercent:y=50,targetMemoryUtilizationPercent:l=75,targetGroup:g,taskDefinition:d,taskImageOptions:p,vpc:Q,...ve}){let Te=e||c.getDefaultCluster(t,Q),x=d;if(x&&p)throw new Error("You must specify either a taskDefinition or taskImageOptions, not both.");if(p){x=new _awscdklib.aws_ecs.FargateTaskDefinition(t,"TaskDef",{memoryLimitMiB:f,cpu:r,executionRole:p.executionRole,taskRole:p.taskRole,family:p.family,runtimePlatform:p.runtimePlatform});let k=_nullishCoalesce(p.enableLogging, () => (!0)),Re=_nullishCoalesce(p.logDriver, () => ((k?new _awscdklib.aws_ecs.AwsLogDriver({streamPrefix:t.node.id}):void 0))),xe=_nullishCoalesce(p.containerName, () => ("app"));x.addContainer(xe,{image:p.image,logging:Re,environment:p.environment,secrets:p.secrets,dockerLabels:p.dockerLabels}).addPortMappings({containerPort:p.containerPort||80})}else if(!x)throw new Error("You must specify one of: taskDefinition or taskImageOptions.");super(t,o,{...ve,cluster:Te,desiredCount:void 0,taskDefinition:x}),this.scalableTarget=this.autoScaleTaskCount({minCapacity:h,maxCapacity:_nullishCoalesce(b, () => (h*2))}),y&&this.scalableTarget.scaleOnCpuUtilization("CpuScaling",{targetUtilizationPercent:y}),l&&this.scalableTarget.scaleOnMemoryUtilization("MemoryScaling",{targetUtilizationPercent:l});let ee=n||_optionalChain([m, 'optionalAccess', _3 => _3.listener]);if(ee){let k=g||new _awscdklib.aws_elasticloadbalancingv2.ApplicationTargetGroup(this,"TargetGroup",{deregistrationDelay:_awscdklib.Duration.seconds(10),protocol:_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocol.HTTP,protocolVersion:_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocolVersion.HTTP1,healthCheck:{healthyHttpCodes:"200-299",healthyThresholdCount:2,interval:_awscdklib.Duration.seconds(10),port:"traffic-port",timeout:_awscdklib.Duration.seconds(5),...i},vpc:Q});k.addTarget(this),new _awscdklib.aws_elasticloadbalancingv2.ApplicationListenerRule(this,"ServiceRule",{listener:ee,action:_awscdklib.aws_elasticloadbalancingv2.ListenerAction.forward([k]),conditions:[_optionalChain([m, 'optionalAccess', _4 => _4.getTokenListenerCondition, 'optionalCall', _5 => _5()]),_awscdklib.aws_elasticloadbalancingv2.ListenerCondition.pathPatterns(_nullishCoalesce(s, () => (["/*"]))),...a].filter(Boolean),priority:u})}}static getDefaultCluster(t,o){let e=`EcsDefaultCluster${o.node.id}`,r=_awscdklib.Stack.of(t);return r.node.tryFindChild(e)||new _awscdklib.aws_ecs.Cluster(r,e,{vpc:o})}};var G=class extends _constructs.Construct{constructor(t,o,{loadBalancerToken:e,assignPublicIp:r=!1,deregistrationDelay:i=_awscdklib.Duration.seconds(10),domainName:n,desiredCount:a=2,healthCheck:s=!0,healthCheckPath:u="/health",healthCheckPort:m,loadBalancer:b,protocol:h=_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocol.HTTPS,scalingCpuTarget:f=50,scalingMemoryTarget:y=75,scalingMax:l=10,vpc:g,...d}){super(t,o),this.assignPublicIp=_nullishCoalesce(r, () => (!1)),this.loadBalancer=b||new A(this,"LB",{certificate:d.certificate,domainName:n,domainZone:d.domainZone,internetFacing:_nullishCoalesce(d.publicLoadBalancer, () => (!0)),listenerPort:d.listenerPort,loadBalancerName:d.loadBalancerName,openListener:_nullishCoalesce(d.openListener, () => (!0)),protocol:h,redirectHTTP:_nullishCoalesce(d.redirectHTTP, () => (!0)),sslPolicy:d.sslPolicy,token:e,vpc:g});let p=this.loadBalancer instanceof A?this.loadBalancer.listener:this.loadBalancer.addListener("PublicListener",{protocol:h,port:d.listenerPort,open:_nullishCoalesce(d.openListener, () => (!0)),sslPolicy:d.sslPolicy});this.targetGroup=new _awscdklib.aws_elasticloadbalancingv2.ApplicationTargetGroup(this,"ECS",{deregistrationDelay:i,protocol:_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocol.HTTP,protocolVersion:_awscdklib.aws_elasticloadbalancingv2.ApplicationProtocolVersion.HTTP1,healthCheck:s?{healthyHttpCodes:"200-299",healthyThresholdCount:2,interval:_awscdklib.Duration.seconds(10),path:u,port:m||"traffic-port",timeout:_awscdklib.Duration.seconds(5),...typeof s=="object"&&s}:void 0,vpc:g}),this.service=new N(this,"Service",{...d,assignPublicIp:this.assignPublicIp,listener:p,loadBalancer:this.loadBalancer instanceof A?this.loadBalancer:void 0,maxCapacity:l||a,minCapacity:a,targetGroup:this.targetGroup,targetCpuUtilizationPercent:f||0,targetMemoryUtilizationPercent:y||0,vpc:g}),this.loadBalancerDomainName=n,this.loadBalancerToken=e,this.cluster=this.service.cluster,this.taskDefinition=this.service.taskDefinition}};var le=class extends _constructs.Construct{constructor(t,o,e){super(t,o),this.bucket=new _awscdklib.aws_s3.Bucket(this,"Bucket",{autoDeleteObjects:e.removalPolicy===_awscdklib.RemovalPolicy.DESTROY,removalPolicy:e.removalPolicy||_awscdklib.RemovalPolicy.RETAIN,websiteErrorDocument:e.websiteErrorDocument,websiteIndexDocument:e.websiteIndexDocument,websiteRoutingRules:e.websiteRoutingRules,blockPublicAccess:new _awscdklib.aws_s3.BlockPublicAccess({blockPublicAcls:!1,blockPublicPolicy:!1,ignorePublicAcls:!1,restrictPublicBuckets:!1}),objectOwnership:_awscdklib.aws_s3.ObjectOwnership.OBJECT_WRITER,publicReadAccess:!0});let r=e.hostedZone||_awscdklib.aws_route53.HostedZone.fromLookup(this,"HostedZone",{domainName:_awscertificatemanager.apexDomain.call(void 0, e.domainName)}),i=e.certificate||new _awscdklib.aws_certificatemanager.DnsValidatedCertificate(this,"Certificate",{domainName:e.domainName,hostedZone:r,subjectAlternativeNames:e.redirectSubdomains,region:"us-east-1"}),n=_nullishCoalesce(e.enableLogging, () => (!0)),a=n?new _awscdklib.aws_s3.Bucket(this,"LogBucket",{autoDeleteObjects:e.removalPolicy===_awscdklib.RemovalPolicy.DESTROY,removalPolicy:e.removalPolicy||_awscdklib.RemovalPolicy.RETAIN,objectOwnership:_awscdklib.aws_s3.ObjectOwnership.OBJECT_WRITER}):void 0,s=[e.httpHeaders&&{functionVersion:e.httpHeaders.currentVersion,eventType:_awscdklib.aws_cloudfront.LambdaEdgeEventType.ORIGIN_RESPONSE},...e.edgeLambdas||[]].filter(Boolean);this.distribution=new _awscdklib.aws_cloudfront.Distribution(this,"Distribution",{certificate:i,domainNames:[e.domainName],defaultBehavior:{origin:new _awscdklib.aws_cloudfront_origins.S3Origin(this.bucket),viewerProtocolPolicy:_awscdklib.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,edgeLambdas:s.length?s:void 0},enableLogging:n,logBucket:a,logIncludesCookies:!1,geoRestriction:_awscdklib.aws_cloudfront.GeoRestriction.denylist("CN","KP","RU")}),this.addBehavior=this.distribution.addBehavior,new _awscdklib.aws_route53.ARecord(this,"ARecord",{recordName:e.domainName,target:_awscdklib.aws_route53.RecordTarget.fromAlias(new _awscdklib.aws_route53_targets.CloudFrontTarget(this.distribution)),zone:r}),new _awscdklib.aws_route53.AaaaRecord(this,"AAAARecord",{recordName:e.domainName,target:_awscdklib.aws_route53.RecordTarget.fromAlias(new _awscdklib.aws_route53_targets.CloudFrontTarget(this.distribution)),zone:r}),_optionalChain([e, 'access', _6 => _6.redirectSubdomains, 'optionalAccess', _7 => _7.length])&&new I(this,"Redirect",{certificate:i,edgeLambdas:e.httpHeaders?[{functionVersion:e.httpHeaders.currentVersion,eventType:_awscdklib.aws_cloudfront.LambdaEdgeEventType.ORIGIN_RESPONSE}]:void 0,recordNames:e.redirectSubdomains,targetDomain:e.domainName,zone:r})}addLoadBalancerBehavior(t){let o,e,r,i={};if(t instanceof G?(e=t.loadBalancer,r=t.loadBalancerToken,o=t.loadBalancerDomainName):t instanceof A?(e=t,r=t.token,o=t.loadBalancerDomainName):t instanceof _awscdklib.aws_elasticloadbalancingv2.ApplicationLoadBalancer?e=t:{loadBalancer:e,loadBalancerToken:r,...i}=t,!e&&!i.origin)throw new Error("At least one of 'loadBalancer' or 'origin' is required");let n=i.origin||new _awscdklib.aws_cloudfront_origins.HttpOrigin(o||e.loadBalancerDnsName,{customHeaders:r?{"X-ALB-Auth-Token":r}:void 0}),a=i.cachePolicy||new _awscdklib.aws_cloudfront.CachePolicy(this,"ApiCachePolicy",{defaultTtl:_awscdklib.Duration.seconds(0),minTtl:_awscdklib.Duration.seconds(0),enableAcceptEncodingBrotli:!0,enableAcceptEncodingGzip:!0,cookieBehavior:_awscdklib.aws_cloudfront.CacheCookieBehavior.none(),headerBehavior:_awscdklib.aws_cloudfront.CacheHeaderBehavior.allowList(...i.allowedHeaders||["Authorization","Origin","User-Agent"]),queryStringBehavior:_awscdklib.aws_cloudfront.CacheQueryStringBehavior.all()});return this.distribution.addBehavior(i.pathPattern||"api/*",n,{allowedMethods:_awscdklib.aws_cloudfront.AllowedMethods.ALLOW_ALL,cachedMethods:_awscdklib.aws_cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,cachePolicy:a})}};var de=class extends _awscdklib.aws_rds.DatabaseInstance{constructor(t,o,{databasePassword:e,databaseUsername:r,removalPolicy:i,storageEncryptionKey:n,version:a,...s}){let u=i||(process.env.NODE_ENV==="production"?_awscdklib.RemovalPolicy.RETAIN:_awscdklib.RemovalPolicy.SNAPSHOT),m=n||new _awscdklib.aws_kms.Key(t,"DatabaseKey",{removalPolicy:u===_awscdklib.RemovalPolicy.RETAIN?_awscdklib.RemovalPolicy.RETAIN:_awscdklib.RemovalPolicy.DESTROY});super(t,o,{engine:_awscdklib.aws_rds.DatabaseInstanceEngine.postgres({version:a||_awscdklib.aws_rds.PostgresEngineVersion.VER_12_4}),instanceType:_awscdklib.aws_ec2.InstanceType.of(_awscdklib.aws_ec2.InstanceClass.T3,_awscdklib.aws_ec2.InstanceSize.MEDIUM),credentials:r&&e&&_awscdklib.aws_rds.Credentials.fromPassword(r,e)||void 0,allocatedStorage:20,backupRetention:_awscdklib.Duration.days(7),deleteAutomatedBackups:!1,maxAllocatedStorage:250,multiAz:!0,removalPolicy:u,storageEncryptionKey:m,vpcSubnets:{subnetType:_awscdklib.aws_ec2.SubnetType.PRIVATE_WITH_NAT},...s})}};var _awsapigatewayv2alpha = require('@aws-cdk/aws-apigatewayv2-alpha'); var $ = _interopRequireWildcard(_awsapigatewayv2alpha);var _awsapigatewayv2integrationsalpha = require('@aws-cdk/aws-apigatewayv2-integrations-alpha'); var J = _interopRequireWildcard(_awsapigatewayv2integrationsalpha);var rt=[/^connection$/i,/^expect$/i,/^keep-alive$/i,/^proxy-authenticate$/i,/^proxy-authorization$/i,/^proxy-connection$/i,/^trailer$/i,/^upgrade$/i,/^x-accel-buffering$/i,/^x-accel-charset$/i,/^x-accel-limit-rate$/i,/^x-accel-redirect$/i,/^X-Amz-Cf-.*/i,/^X-Amzn-.*/i,/^X-Cache.*/i,/^X-Edge-.*/i,/^X-Forwarded-Proto.*/i,/^X-Real-IP$/i],ot={"Referrer-Policy":"origin-when-cross-origin, strict-origin-when-cross-origin","Strict-Transport-Security":"max-age=31536000; includeSubDomains","X-Content-Type-Options":"nosniff","X-Frame-Options":"DENY","X-XSS-Protection":"1; mode=block"},ue= exports.HttpHeaders =class extends _awscdklib.aws_cloudfront.experimental.EdgeFunction{constructor(t,o,{httpHeaders:e=ot,logLevel:r="none",...i}={}){Object.keys(e).forEach(n=>{if(rt.some(a=>a.test(n)))throw new Error(`HttpHeader ${n} is blacklisted and can't be added by Lambda@Edge functions`)}),super(t,o,{...i,code:P(_path.resolve.call(void 0, __dirname,"lambda"),{httpHeaders:{Server:"DLabs",...e},logLevel:r}),handler:"index.handler",runtime:_awscdklib.aws_lambda.Runtime.NODEJS_16_X})}};var _contentsecuritypolicybuilder = require('content-security-policy-builder'); var _contentsecuritypolicybuilder2 = _interopRequireDefault(_contentsecuritypolicybuilder);var me=class extends _awscdklib.aws_cloudfront.experimental.EdgeFunction{constructor(t,o,{logLevel:e="none",redirectPatterns:r,...i}){super(t,o,{...i,code:P(_path.resolve.call(void 0, __dirname,"lambda"),{logLevel:e,redirectPatterns:r}),handler:"index.handler",runtime:_awscdklib.aws_lambda.Runtime.NODEJS_16_X})}};var pe=class extends _awscdklib.aws_cloudfront.experimental.EdgeFunction{constructor(t,o,{defaultRewritePath:e="/index.html",enableDefaultRewrite:r=!0,logLevel:i="none",rewritePaths:n,rewritePatterns:a,...s}={}){super(t,o,{...s,code:P(_path.resolve.call(void 0, __dirname,"lambda"),{defaultRewritePath:e,enableDefaultRewrite:r,logLevel:i,rewritePaths:n,rewritePatterns:a}),handler:"index.handler",runtime:_awscdklib.aws_lambda.Runtime.NODEJS_16_X})}};var fe=class extends _awscdklib.aws_cloudfront.experimental.EdgeFunction{constructor(t,o,{logLevel:e="none",redirects:r,origin:i,url:n,...a}){super(t,o,{...a,code:P(_path.resolve.call(void 0, __dirname,"lambda"),{logLevel:e,redirects:r,origin:i,url:n}),handler:"index.request",runtime:_awscdklib.aws_lambda.Runtime.NODEJS_16_X})}};var ge=class extends _awscdklib.aws_cloudfront.experimental.EdgeFunction{constructor(t,o,{logLevel:e="none",redirects:r,origin:i,url:n,...a}){super(t,o,{...a,code:P(_path.resolve.call(void 0, __dirname,"lambda"),{logLevel:e,redirects:r,origin:i,url:n}),handler:"index.response",runtime:_awscdklib.aws_lambda.Runtime.NODEJS_16_X})}};var he=["f","m","q","s","w","h"],E= exports.ImageResize =class extends _awscdklib.aws_lambda.Function{constructor(t,o,{allowedDimensions:e,allowedFormats:r,cacheControlMaxAge:i,cacheControlSMaxAge:n,defaultDimension:a,defaultFormat:s,defaultQuality:u,defaultMode:m,bucketName:b,keyPrefix:h,logLevel:f="none",maxHeight:y,maxQuality:l,maxWidth:g,...d}){super(t,o,{memorySize:1024,timeout:_awscdklib.Duration.seconds(30),...d,code:P(_path.resolve.call(void 0, __dirname,"lambda"),{allowedDimensions:e,allowedFormats:r,cacheControlMaxAge:i,cacheControlSMaxAge:n,defaultDimension:a,defaultFormat:s,defaultQuality:u,defaultMode:m,bucketName:b,keyPrefix:h,logLevel:f,maxHeight:y,maxQuality:l,maxWidth:g},!0),handler:_awscdklib.aws_lambda.Handler.FROM_IMAGE,runtime:_awscdklib.aws_lambda.Runtime.FROM_IMAGE})}};var we=class extends _constructs.Construct{constructor(t,o,{behaviors:e={},bucketName:r,cachePolicy:i,certificate:n,defaultBehavior:a,domainName:s,hostedZone:u,removalPolicy:m=_awscdklib.RemovalPolicy.RETAIN}){super(t,o),this.bucket=r?_awscdklib.aws_s3.Bucket.fromBucketName(this,"IBucket",r):new _awscdklib.aws_s3.Bucket(this,"Bucket",{cors:[{allowedHeaders:["*"],allowedMethods:[_awscdklib.aws_s3.HttpMethods.GET,_awscdklib.aws_s3.HttpMethods.HEAD,_awscdklib.aws_s3.HttpMethods.POST,_awscdklib.aws_s3.HttpMethods.PUT],allowedOrigins:["*"]}],publicReadAccess:!1,autoDeleteObjects:m===_awscdklib.RemovalPolicy.DESTROY,removalPolicy:m||_awscdklib.RemovalPolicy.RETAIN});let b;a&&(b=new E(this,"ImageResize",{bucketName:r,...a,environment:{BUCKET_NAME:this.bucket.bucketName,...a.environment}}),this.bucket.grantRead(b)),this.api=new $.HttpApi(this,`ImageProxy-${s}`,{defaultIntegration:b?new J.HttpLambdaIntegration(`ImageProxyFn-${s}`,b):void 0}),Object.entries(e).forEach(([l,g])=>{let d=new E(this,`ImageResize-${l}`,{bucketName:r,keyPrefix:l,...g,environment:{BUCKET_NAME:this.bucket.bucketName,...g.environment}});this.bucket.grantRead(d,`${l}/*`);let p=new J.HttpLambdaIntegration(`ImageResizeFn-${l}`,d);this.api.addRoutes({path:`/${l}/{image+}`,methods:[$.HttpMethod.GET],integration:p})});let h=u||_awscdklib.aws_route53.HostedZone.fromLookup(this,"HostedZone",{domainName:_awscertificatemanager.apexDomain.call(void 0, s)}),f=n||new _awscdklib.aws_certificatemanager.DnsValidatedCertificate(this,"Certificate",{domainName:s,hostedZone:h,region:"us-east-1"}),y=i||new _awscdklib.aws_cloudfront.CachePolicy(this,"CachePolicy",{defaultTtl:_awscdklib.Duration.seconds(86400*7),minTtl:_awscdklib.Duration.seconds(0),enableAcceptEncodingBrotli:!0,enableAcceptEncodingGzip:!0,cookieBehavior:_awscdklib.aws_cloudfront.CacheCookieBehavior.none(),headerBehavior:_awscdklib.aws_cloudfront.CacheHeaderBehavior.none(),queryStringBehavior:_awscdklib.aws_cloudfront.CacheQueryStringBehavior.allowList(...he)});this.distribution=new _awscdklib.aws_cloudfront.Distribution(this,"Distribution",{certificate:f,domainNames:[s],defaultBehavior:{cachePolicy:y,origin:new _awscdklib.aws_cloudfront_origins.HttpOrigin(`${this.api.httpApiId}.execute-api.${_awscdklib.Stack.of(this).region}.${_awscdklib.Stack.of(this).urlSuffix}`),viewerProtocolPolicy:_awscdklib.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS},geoRestriction:_awscdklib.aws_cloudfront.GeoRestriction.denylist("CN","IR","KP","RU")}),new _awscdklib.aws_route53.ARecord(this,"ARecord",{recordName:s,target:_awscdklib.aws_route53.RecordTarget.fromAlias(new _awscdklib.aws_route53_targets.CloudFrontTarget(this.distribution)),zone:h}),new _awscdklib.aws_route53.AaaaRecord(this,"AAAARecord",{recordName:s,target:_awscdklib.aws_route53.RecordTarget.fromAlias(new _awscdklib.aws_route53_targets.CloudFrontTarget(this.distribution)),zone:h})}};var Ae=class extends _constructs.Construct{constructor(t,o,e){if(super(t,o),!e.securityGroup&&!e.vpc)throw new Error("At least one of 'securityGroup' or 'vpc' is required");if(this.securityGroup=e.securityGroup||new _awscdklib.aws_ec2.SecurityGroup(this,"SecurityGroup",{vpc:e.vpc}),!e.subnetIds&&!e.vpc)throw new Error("At least one of 'subnetIds' or 'vpc' is required");let r=new _awscdklib.aws_elasticache.CfnSubnetGroup(this,"SubnetGroup",{description:"Redis subnet group",subnetIds:e.subnetIds||e.vpc.privateSubnets.map(({subnetId:i})=>i)});this.cluster=new _awscdklib.aws_elasticache.CfnCacheCluster(this,"CacheCluster",{cacheNodeType:e.cacheNodeType||"cache.t3.medium",engine:"redis",engineVersion:e.engineVersion||"6.x",numCacheNodes:e.numCacheNodes||1,preferredMaintenanceWindow:e.preferredMaintenanceWindow||"sun:06:00-sun:09:00",cacheSubnetGroupName:r.ref,vpcSecurityGroupIds:[this.securityGroup.securityGroupId]}),this.cluster.addDependsOn(r),this.connections=new _awscdklib.aws_ec2.Connections({securityGroups:[this.securityGroup],defaultPort:_awscdklib.aws_ec2.Port.tcp(6379)}),this.clusterEndpointAddress=this.cluster.attrRedisEndpointAddress,this.clusterEndpointPort=this.cluster.attrRedisEndpointPort}};exports.ApplicationLoadBalancer = A; exports.Cdn = le; exports.Database = de; exports.FargateService = N; exports.HttpHeaders = ue; exports.HttpsRedirect = I; exports.ImageProxy = we; exports.ImageResize = E; exports.ImageResizeQueryParams = he; exports.LoadBalancedFargateService = G; exports.Redirect = me; exports.RedisCluster = Ae; exports.RequestUri = pe; exports.WordpressRequest = fe; exports.WordpressResponse = ge; exports.apexDomain = _awscertificatemanager.apexDomain; exports.codeAssetWithConfig = P; exports.cspBuilder = _contentsecuritypolicybuilder2.default; exports.getHash = ne; exports.inlineAsset = Ht;
